[{"C:\\Users\\rohan\\Documents\\Final Year Project\\EDG\\frontend\\src\\index.js":"1","C:\\Users\\rohan\\Documents\\Final Year Project\\EDG\\frontend\\src\\reportWebVitals.js":"2","C:\\Users\\rohan\\Documents\\Final Year Project\\EDG\\frontend\\src\\App.js":"3","C:\\Users\\rohan\\Documents\\Final Year Project\\EDG\\frontend\\src\\components\\Header.js":"4","C:\\Users\\rohan\\Documents\\Final Year Project\\EDG\\frontend\\src\\components\\Footer.js":"5","C:\\Users\\rohan\\Documents\\Final Year Project\\EDG\\frontend\\src\\screens\\HomeScreen.js":"6","C:\\Users\\rohan\\Documents\\Final Year Project\\EDG\\frontend\\src\\components\\Product.js":"7","C:\\Users\\rohan\\Documents\\Final Year Project\\EDG\\frontend\\src\\components\\Rating.js":"8","C:\\Users\\rohan\\Documents\\Final Year Project\\EDG\\frontend\\src\\screens\\ProductScreen.js":"9","C:\\Users\\rohan\\Documents\\Final Year Project\\EDG\\frontend\\src\\store.js":"10","C:\\Users\\rohan\\Documents\\Final Year Project\\EDG\\frontend\\src\\reducers\\productReducers.js":"11","C:\\Users\\rohan\\Documents\\Final Year Project\\EDG\\frontend\\src\\constants\\productConstants.js":"12","C:\\Users\\rohan\\Documents\\Final Year Project\\EDG\\frontend\\src\\actions\\productActions.js":"13","C:\\Users\\rohan\\Documents\\Final Year Project\\EDG\\frontend\\src\\components\\Loader.js":"14","C:\\Users\\rohan\\Documents\\Final Year Project\\EDG\\frontend\\src\\components\\Message.js":"15","C:\\Users\\rohan\\Documents\\Final Year Project\\EDG\\frontend\\src\\screens\\CartScreen.js":"16","C:\\Users\\rohan\\Documents\\Final Year Project\\EDG\\frontend\\src\\reducers\\cartReducers.js":"17","C:\\Users\\rohan\\Documents\\Final Year Project\\EDG\\frontend\\src\\constants\\cartConstants.js":"18","C:\\Users\\rohan\\Documents\\Final Year Project\\EDG\\frontend\\src\\actions\\cartActions.js":"19","C:\\Users\\rohan\\Documents\\Final Year Project\\EDG\\frontend\\src\\reducers\\userReducers.js":"20","C:\\Users\\rohan\\Documents\\Final Year Project\\EDG\\frontend\\src\\constants\\userConstants.js":"21","C:\\Users\\rohan\\Documents\\Final Year Project\\EDG\\frontend\\src\\screens\\LoginScreen.js":"22","C:\\Users\\rohan\\Documents\\Final Year Project\\EDG\\frontend\\src\\actions\\userActions.js":"23","C:\\Users\\rohan\\Documents\\Final Year Project\\EDG\\frontend\\src\\components\\FormContainer.js":"24","C:\\Users\\rohan\\Documents\\Final Year Project\\EDG\\frontend\\src\\screens\\RegisterScreen.js":"25","C:\\Users\\rohan\\Documents\\Final Year Project\\EDG\\frontend\\src\\screens\\ProfileScreen.js":"26","C:\\Users\\rohan\\Documents\\Final Year Project\\EDG\\frontend\\src\\screens\\ShippingScreen.js":"27","C:\\Users\\rohan\\Documents\\Final Year Project\\EDG\\frontend\\src\\components\\CheckoutSteps.js":"28","C:\\Users\\rohan\\Documents\\Final Year Project\\EDG\\frontend\\src\\screens\\PaymentScreen.js":"29","C:\\Users\\rohan\\Documents\\Final Year Project\\EDG\\frontend\\src\\screens\\PlaceOrderScreen.js":"30","C:\\Users\\rohan\\Documents\\Final Year Project\\EDG\\frontend\\src\\reducers\\orderReducer.js":"31","C:\\Users\\rohan\\Documents\\Final Year Project\\EDG\\frontend\\src\\constants\\orderConstants.js":"32","C:\\Users\\rohan\\Documents\\Final Year Project\\EDG\\frontend\\src\\actions\\orderActions.js":"33","C:\\Users\\rohan\\Documents\\Final Year Project\\EDG\\frontend\\src\\screens\\OrderScreen.js":"34","C:\\Users\\rohan\\Documents\\Final Year Project\\EDG\\frontend\\src\\screens\\UserListScreen.js":"35","C:\\Users\\rohan\\Documents\\Final Year Project\\EDG\\frontend\\src\\screens\\UserEditScreen.js":"36","C:\\Users\\rohan\\Documents\\Final Year Project\\EDG\\frontend\\src\\screens\\ProductListScreen.js":"37","C:\\Users\\rohan\\Documents\\Final Year Project\\EDG\\frontend\\src\\screens\\ProductEditScreen.js":"38","C:\\Users\\rohan\\Documents\\Final Year Project\\EDG\\frontend\\src\\screens\\OrderListScreen.js":"39","C:\\Users\\rohan\\Documents\\Final Year Project\\EDG\\frontend\\src\\components\\SearchBox.js":"40","C:\\Users\\rohan\\Documents\\Final Year Project\\EDG\\frontend\\src\\components\\Paginate.js":"41","C:\\Users\\rohan\\Documents\\Final Year Project\\EDG\\frontend\\src\\components\\ProductCarousel.js":"42","C:\\Users\\rohan\\Documents\\Final Year Project\\EDG\\frontend\\src\\components\\Meta.js":"43"},{"size":1049,"mtime":1619468839287,"results":"44","hashOfConfig":"45"},{"size":362,"mtime":499162500000,"results":"46","hashOfConfig":"45"},{"size":6607,"mtime":1619466336535,"results":"47","hashOfConfig":"45"},{"size":5635,"mtime":1618747846088,"results":"48","hashOfConfig":"45"},{"size":799,"mtime":1616684703474,"results":"49","hashOfConfig":"45"},{"size":3660,"mtime":1619738147806,"results":"50","hashOfConfig":"45"},{"size":2207,"mtime":1617220823261,"results":"51","hashOfConfig":"45"},{"size":2974,"mtime":1619892537765,"results":"52","hashOfConfig":"45"},{"size":12981,"mtime":1618787964600,"results":"53","hashOfConfig":"45"},{"size":5808,"mtime":1619468751729,"results":"54","hashOfConfig":"45"},{"size":8602,"mtime":1619215843380,"results":"55","hashOfConfig":"45"},{"size":4540,"mtime":1618950851930,"results":"56","hashOfConfig":"45"},{"size":13168,"mtime":1619208323208,"results":"57","hashOfConfig":"45"},{"size":1226,"mtime":1617220799431,"results":"58","hashOfConfig":"45"},{"size":1024,"mtime":1617220805367,"results":"59","hashOfConfig":"45"},{"size":7247,"mtime":1617787789846,"results":"60","hashOfConfig":"45"},{"size":2560,"mtime":1619212491921,"results":"61","hashOfConfig":"45"},{"size":762,"mtime":1618959303707,"results":"62","hashOfConfig":"45"},{"size":3615,"mtime":1619046290230,"results":"63","hashOfConfig":"45"},{"size":8161,"mtime":1619216640776,"results":"64","hashOfConfig":"45"},{"size":4567,"mtime":1618867660072,"results":"65","hashOfConfig":"45"},{"size":4811,"mtime":1618239260983,"results":"66","hashOfConfig":"45"},{"size":14986,"mtime":1619211290165,"results":"67","hashOfConfig":"45"},{"size":1258,"mtime":1617220793768,"results":"68","hashOfConfig":"45"},{"size":6552,"mtime":1618512725533,"results":"69","hashOfConfig":"45"},{"size":10496,"mtime":1618785607189,"results":"70","hashOfConfig":"45"},{"size":5878,"mtime":1618514808335,"results":"71","hashOfConfig":"45"},{"size":3414,"mtime":1617220783415,"results":"72","hashOfConfig":"45"},{"size":3566,"mtime":1619874144265,"results":"73","hashOfConfig":"45"},{"size":9114,"mtime":1618599440395,"results":"74","hashOfConfig":"45"},{"size":7734,"mtime":1619214337891,"results":"75","hashOfConfig":"45"},{"size":3893,"mtime":1618865186004,"results":"76","hashOfConfig":"45"},{"size":12828,"mtime":1619126575979,"results":"77","hashOfConfig":"45"},{"size":13736,"mtime":1619874935081,"results":"78","hashOfConfig":"45"},{"size":6046,"mtime":1618518720233,"results":"79","hashOfConfig":"45"},{"size":6697,"mtime":1618521320075,"results":"80","hashOfConfig":"45"},{"size":7765,"mtime":1618786332016,"results":"81","hashOfConfig":"45"},{"size":11819,"mtime":1618784294543,"results":"82","hashOfConfig":"45"},{"size":5694,"mtime":1618244368599,"results":"83","hashOfConfig":"45"},{"size":1718,"mtime":1617392325406,"results":"84","hashOfConfig":"45"},{"size":2038,"mtime":1617220815517,"results":"85","hashOfConfig":"45"},{"size":2693,"mtime":1617220829210,"results":"86","hashOfConfig":"45"},{"size":1201,"mtime":1617220810562,"results":"87","hashOfConfig":"45"},{"filePath":"88","messages":"89","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"90"},"1elu97f",{"filePath":"91","messages":"92","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"90"},{"filePath":"93","messages":"94","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"90"},{"filePath":"95","messages":"96","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"90"},{"filePath":"97","messages":"98","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"90"},{"filePath":"99","messages":"100","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"90"},{"filePath":"101","messages":"102","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"90"},{"filePath":"103","messages":"104","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"90"},{"filePath":"105","messages":"106","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"107","usedDeprecatedRules":"90"},{"filePath":"108","messages":"109","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"90"},{"filePath":"110","messages":"111","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"90"},{"filePath":"112","messages":"113","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"90"},{"filePath":"114","messages":"115","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"90"},{"filePath":"116","messages":"117","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"90"},{"filePath":"118","messages":"119","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"90"},{"filePath":"120","messages":"121","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"90"},{"filePath":"122","messages":"123","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"90"},{"filePath":"124","messages":"125","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"90"},{"filePath":"126","messages":"127","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"90"},{"filePath":"128","messages":"129","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"90"},{"filePath":"130","messages":"131","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"90"},{"filePath":"132","messages":"133","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"90"},{"filePath":"134","messages":"135","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"90"},{"filePath":"136","messages":"137","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"90"},{"filePath":"138","messages":"139","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"90"},{"filePath":"140","messages":"141","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"90"},{"filePath":"142","messages":"143","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"90"},{"filePath":"144","messages":"145","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"90"},{"filePath":"146","messages":"147","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"90"},{"filePath":"148","messages":"149","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"90"},{"filePath":"150","messages":"151","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"90"},{"filePath":"152","messages":"153","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"90"},{"filePath":"154","messages":"155","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"90"},{"filePath":"156","messages":"157","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"158","usedDeprecatedRules":"90"},{"filePath":"159","messages":"160","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"90"},{"filePath":"161","messages":"162","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"90"},{"filePath":"163","messages":"164","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"90"},{"filePath":"165","messages":"166","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"90"},{"filePath":"167","messages":"168","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"90"},{"filePath":"169","messages":"170","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"90"},{"filePath":"171","messages":"172","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"90"},{"filePath":"173","messages":"174","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"175"},{"filePath":"176","messages":"177","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"90"},"C:\\Users\\rohan\\Documents\\Final Year Project\\EDG\\frontend\\src\\index.js",[],["178","179"],"C:\\Users\\rohan\\Documents\\Final Year Project\\EDG\\frontend\\src\\reportWebVitals.js",[],"C:\\Users\\rohan\\Documents\\Final Year Project\\EDG\\frontend\\src\\App.js",[],"C:\\Users\\rohan\\Documents\\Final Year Project\\EDG\\frontend\\src\\components\\Header.js",[],"C:\\Users\\rohan\\Documents\\Final Year Project\\EDG\\frontend\\src\\components\\Footer.js",[],"C:\\Users\\rohan\\Documents\\Final Year Project\\EDG\\frontend\\src\\screens\\HomeScreen.js",[],"C:\\Users\\rohan\\Documents\\Final Year Project\\EDG\\frontend\\src\\components\\Product.js",[],"C:\\Users\\rohan\\Documents\\Final Year Project\\EDG\\frontend\\src\\components\\Rating.js",[],"C:\\Users\\rohan\\Documents\\Final Year Project\\EDG\\frontend\\src\\screens\\ProductScreen.js",["180"],"//This is the product description screen , this screen will contain information about the product , like description , price reviews and add in cart and more\r\nimport React, { useEffect, useState } from \"react\";\r\n//Importing react elements into the functional component, By useEffect you can tell react that the component needs to do something after it renders, useState is used for component level state management\r\nimport { Link } from \"react-router-dom\";\r\n//Provides declarative , accessible navigation around the application\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\n//useSelector is used to feth the payload value from the reducer,The dispatch hook returns a reference to the dispatch funtion from the redux store ,used to dispatch actions\r\nimport {\r\n  Row,\r\n  Col,\r\n  Image,\r\n  ListGroup,\r\n  Card,\r\n  Button,\r\n  ListGroupItem,\r\n  Form,\r\n} from \"react-bootstrap\";\r\n//The bootstrap elements are bought in from the react bootstrap\r\nimport Rating from \"../components/Rating\";\r\n//The rating component is bought in\r\nimport Loader from \"../components/Loader\";\r\n//Fetching the loader component\r\nimport Message from \"../components/Message\";\r\n//Fetching the message component\r\nimport Meta from \"../components/Meta\";\r\n//The meta is bought in\r\nimport {\r\n  listProductDetails,\r\n  createProductReview,\r\n} from \"../actions/productActions\";\r\n// The list product details and create product reviews should be bought in\r\nimport { PRODUCT_CREATE_REVIEW_RESET } from \"../constants/productConstants\";\r\n// Product review reset costant should be bought in\r\n\r\n//This screen takes in location(which is used to direct the user when they are logged in) and history(to push the user )\r\nconst ProductScreen = ({ history, match }) => {\r\n  const [qty, setQty] = useState(1);\r\n  // above is the component level state for storing quantity, default to be 1\r\n  const [rating, setRating] = useState(0);\r\n  // above is the component level state for storing rating , default to 0\r\n  const [comment, setComment] = useState(\"\");\r\n  // above is the component level state for storing comment , stored in a empty string.\r\n\r\n  const dispatch = useDispatch();\r\n  //The dispatch hook returns a reference to the dispatch funtion from the redux store ,used to dispatch actions\r\n\r\n  const productDetails = useSelector((state) => state.productDetails);\r\n  const { loading, error, product } = productDetails;\r\n  // fetches all the product deatils including the loading and error details from the reducer\r\n\r\n  const userLogin = useSelector((state) => state.userLogin);\r\n  const { userInfo } = userLogin;\r\n  //userInfo should be bought in , userInfo is whether the user is an admin or not\r\n\r\n  const productReviewCreate = useSelector((state) => state.productReviewCreate);\r\n  const {\r\n    success: successProductReview,\r\n    error: errorProductReview,\r\n  } = productReviewCreate;\r\n  // loading, error and success of when the product review is created\r\n\r\n  useEffect(() => {\r\n    if (successProductReview) {\r\n      // if the product review is put in then make an alert saying review submitted and set the rating and comment back to 0\r\n      alert(\"Review Submitted!\");\r\n      setRating(0);\r\n      setComment(\"\");\r\n      dispatch({ type: PRODUCT_CREATE_REVIEW_RESET });\r\n      // dispatch the constant\r\n    }\r\n    dispatch(listProductDetails(match.params.id));\r\n    // list the product details after the review is submitted\r\n  }, [dispatch, match, successProductReview]);\r\n\r\n  const addToCartHandler = () => {\r\n    history.push(`/cart/${match.params.id}?qty=${qty}`);\r\n  };\r\n  //Add to cart pushes the user to the cart\r\n\r\n  const submitHandler = (e) => {\r\n    e.preventDefault();\r\n    dispatch(\r\n      createProductReview(match.params.id, {\r\n        rating,\r\n        comment,\r\n      })\r\n    );\r\n  };\r\n  // This submithandler is pushed when a review is added into the product system\r\n\r\n  return (\r\n    <>\r\n      <Link className=\"btn btn-light my-3\" to=\"/\">\r\n        {/* To go back to the home screen a back button should be put */}\r\n        Go Back\r\n      </Link>\r\n      {loading ? (\r\n        // If loading is true then show the loader\r\n        <Loader />\r\n      ) : error ? (\r\n        // If message is true show the error message \r\n        <Message variant=\"danger\">{error} </Message>\r\n      ) : (\r\n        // no loader , no message , then show the remaining\r\n        <>\r\n          <Meta title={product.name} />\r\n          {/* The tile would be the product name */}\r\n          <Row>\r\n            <Col md={6}>\r\n              {/*Three coulmns , the first column with image and alt is the name  */}\r\n              <Image src={product.image} alt={product.name} fluid />\r\n            </Col>\r\n            <Col md={3}>\r\n              <ListGroup variant=\"flush\">\r\n                <ListGroup.Item>\r\n                  {/* The product name should be shown in the second column */}\r\n                  <h3>{product.name}</h3>\r\n                </ListGroup.Item>\r\n                <ListGroup.Item>\r\n                  <Rating\r\n                  // The rating of the product should be shown below \r\n                    value={product.rating}\r\n                    // The value of the rating is applied here\r\n                    text={`${product.numReviews} reviews`}\r\n                    // The number of reviews is displayed here\r\n                  />\r\n                </ListGroup.Item>\r\n                {/* The price if the products is displayed here */}\r\n                <ListGroup.Item>Price: £{product.price}</ListGroup.Item>\r\n                <ListGroup.Item>\r\n                  {/* The description of the product should here */}\r\n                  Description: {product.description}\r\n                </ListGroup.Item>\r\n              </ListGroup>\r\n            </Col>\r\n            <Col md={3}>\r\n              {/* The last column should display the add to cart button , stock, price and quantity */}\r\n              <Card>\r\n                <ListGroup variant=\"flush\">\r\n                  <ListGroup.Item>\r\n                    <Row>\r\n                      {/* The price of the product */}\r\n                      <Col>Price:</Col>\r\n                      <Col>\r\n                        <strong>£{product.price}</strong>\r\n                      </Col>\r\n                    </Row>\r\n                  </ListGroup.Item>\r\n                </ListGroup>\r\n                <ListGroup variant=\"flush\">\r\n                  <ListGroup.Item>\r\n                    <Row>\r\n                      <Col>Status:</Col>\r\n                      {/* The status of the product */}\r\n                      <Col>\r\n                      {/* if the product is in stock , show in stock or show out of the stock */}\r\n                        {product.countInStock > 0 ? \"In Stock\" : \"Out of Stock\"}\r\n                      </Col>\r\n                    </Row>\r\n                  </ListGroup.Item>\r\n\r\n                  {product.countInStock > 0 && (\r\n                    // the below is the quatity of the product\r\n                    <ListGroup.Item>\r\n                      <Row>\r\n                        <Col>Qty</Col>\r\n                        {/*  PRODUCT QUANTITY */}\r\n                        <Col>\r\n                          <Form.Control\r\n                            as=\"select\"\r\n                            value={qty}\r\n                            onChange={(e) => setQty(e.target.value)}\r\n                            // On count set the the set quantity value \r\n                          >\r\n                            {[...Array(product.countInStock).keys()].map(\r\n                              (x) => (\r\n                                <option key={x + 1} value={x + 1}>\r\n                                  {x + 1}\r\n                                </option>\r\n                                // Array the drop down list with how many products are there in the system\r\n                              )\r\n                            )}\r\n                          </Form.Control>\r\n                        </Col>\r\n                      </Row>\r\n                    </ListGroup.Item>\r\n                  )}\r\n\r\n                  <ListGroup.Item>\r\n                    <Button\r\n                    // This is the ass to cart button which add the product in to the basket , if no stock of the product then the button should be disabled \r\n                      onClick={addToCartHandler}\r\n                      className=\"btn-block\"\r\n                      type=\"button\"\r\n                      disabled={product.countInStock === 0}\r\n                    >\r\n                      Add To Cart\r\n                    </Button>\r\n                    {/* Add to cart button */}\r\n                  </ListGroup.Item>\r\n                </ListGroup>\r\n              </Card>\r\n            </Col>\r\n          </Row>\r\n          <Row>\r\n            <Col md={6}>\r\n              <h2>Reviews</h2>\r\n              {/* IN the first column below the big image the reviews component should be showed*/}\r\n              {product.reviews.length === 0 && <Message>No Reviews</Message>}\r\n              {/* If reviews are 0 then show no reviews message*/}\r\n              <ListGroup variant=\"flush\">\r\n                {product.reviews.map((review) => (\r\n                  // If reviews are present then map the reviews \r\n                  <ListGroup.Item key={review._id}>\r\n                    <strong>{review.name}</strong>\r\n                    {/* The name of the user who game the review*/}\r\n                    <Rating value={review.rating} />\r\n                    {/* The value of the rating , which is onethe scale of 1 to 5 */}\r\n                    <p>{review.createdAt.substring(0, 10)}</p>\r\n                    {/* The date of the review created */}\r\n                    <p>{review.comment}</p>\r\n                    {/* The comment of the user who gave the review */}\r\n                  </ListGroup.Item>\r\n                ))}\r\n                <ListGroup.Item>\r\n                  <h2>Write a Customer Review</h2>\r\n                  {/* A small form should be created to enter the form deatils  */}\r\n                  {errorProductReview && (\r\n                    // If the errorProductReview is true then show the error message\r\n                    <Message variant=\"danger\">{errorProductReview}</Message>\r\n                  )}\r\n                  {userInfo ? (\r\n                    // Only registered user acan be able to rate and review a product , so check should happen\r\n                    <Form onSubmit={submitHandler}>\r\n                      <Form.Group controlId=\"rating\">\r\n                        <Form.Label>Rating</Form.Label>\r\n                        {/* The rating form should be placed here */}\r\n                        <Form.Control\r\n                          as=\"select\"\r\n                          value={rating}\r\n                          onChange={(e) => setRating(e.target.value)}\r\n                          // The set rating is assigned the new value \r\n                        >\r\n                          <option value=\"\">Select...</option>\r\n                          {/* A drop doen menu should be made , 1 to 5 , poor to excellent*/}\r\n                          <option value=\"1\">1 - Poor</option>\r\n                          <option value=\"2\">2 - Fair</option>\r\n                          <option value=\"3\">3 - Good</option>\r\n                          <option value=\"4\">4 - Very Good</option>\r\n                          <option value=\"5\">5 - Excellent</option>\r\n                        </Form.Control>\r\n                      </Form.Group>\r\n                      <Form.Group controlId=\"comment\">\r\n                        {/* Here the regustered user can also add a comment about the product */}\r\n                        <Form.Label>Comment</Form.Label>\r\n                        {/* The heading of the comment */}\r\n                        <Form.Control\r\n                          as=\"textarea\"\r\n                          row=\"3\"\r\n                          value={comment}\r\n                          // The comment value\r\n                          onChange={(e) => setComment(e.target.value)}\r\n                          // The new comment value should be set to the setComment local state\r\n                        ></Form.Control>\r\n                      </Form.Group>\r\n                      <Button type=\"submit\" variant=\"primary\">\r\n                        {/* The submit button */}\r\n                        Submit\r\n                      </Button>\r\n                    </Form>\r\n                  ) : (\r\n                    <Message>\r\n                      {/* If the user is not registred then the user should  login only then there are able to login, and a registered user is only able to give a review and rating only once */}\r\n                      Please <Link to=\"/login\">sign in</Link> to write a review\r\n                    </Message>\r\n                  )}\r\n                </ListGroup.Item>\r\n              </ListGroup>\r\n            </Col>\r\n          </Row>\r\n        </>\r\n      )}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default ProductScreen;\r\n//The Product screen is then exported to App.js file\r\n","C:\\Users\\rohan\\Documents\\Final Year Project\\EDG\\frontend\\src\\store.js",[],"C:\\Users\\rohan\\Documents\\Final Year Project\\EDG\\frontend\\src\\reducers\\productReducers.js",[],"C:\\Users\\rohan\\Documents\\Final Year Project\\EDG\\frontend\\src\\constants\\productConstants.js",[],"C:\\Users\\rohan\\Documents\\Final Year Project\\EDG\\frontend\\src\\actions\\productActions.js",[],"C:\\Users\\rohan\\Documents\\Final Year Project\\EDG\\frontend\\src\\components\\Loader.js",[],"C:\\Users\\rohan\\Documents\\Final Year Project\\EDG\\frontend\\src\\components\\Message.js",[],"C:\\Users\\rohan\\Documents\\Final Year Project\\EDG\\frontend\\src\\screens\\CartScreen.js",[],"C:\\Users\\rohan\\Documents\\Final Year Project\\EDG\\frontend\\src\\reducers\\cartReducers.js",[],"C:\\Users\\rohan\\Documents\\Final Year Project\\EDG\\frontend\\src\\constants\\cartConstants.js",[],"C:\\Users\\rohan\\Documents\\Final Year Project\\EDG\\frontend\\src\\actions\\cartActions.js",[],"C:\\Users\\rohan\\Documents\\Final Year Project\\EDG\\frontend\\src\\reducers\\userReducers.js",[],"C:\\Users\\rohan\\Documents\\Final Year Project\\EDG\\frontend\\src\\constants\\userConstants.js",[],"C:\\Users\\rohan\\Documents\\Final Year Project\\EDG\\frontend\\src\\screens\\LoginScreen.js",[],"C:\\Users\\rohan\\Documents\\Final Year Project\\EDG\\frontend\\src\\actions\\userActions.js",[],"C:\\Users\\rohan\\Documents\\Final Year Project\\EDG\\frontend\\src\\components\\FormContainer.js",[],"C:\\Users\\rohan\\Documents\\Final Year Project\\EDG\\frontend\\src\\screens\\RegisterScreen.js",[],"C:\\Users\\rohan\\Documents\\Final Year Project\\EDG\\frontend\\src\\screens\\ProfileScreen.js",[],"C:\\Users\\rohan\\Documents\\Final Year Project\\EDG\\frontend\\src\\screens\\ShippingScreen.js",[],"C:\\Users\\rohan\\Documents\\Final Year Project\\EDG\\frontend\\src\\components\\CheckoutSteps.js",[],"C:\\Users\\rohan\\Documents\\Final Year Project\\EDG\\frontend\\src\\screens\\PaymentScreen.js",[],"C:\\Users\\rohan\\Documents\\Final Year Project\\EDG\\frontend\\src\\screens\\PlaceOrderScreen.js",[],"C:\\Users\\rohan\\Documents\\Final Year Project\\EDG\\frontend\\src\\reducers\\orderReducer.js",[],"C:\\Users\\rohan\\Documents\\Final Year Project\\EDG\\frontend\\src\\constants\\orderConstants.js",[],"C:\\Users\\rohan\\Documents\\Final Year Project\\EDG\\frontend\\src\\actions\\orderActions.js",[],"C:\\Users\\rohan\\Documents\\Final Year Project\\EDG\\frontend\\src\\screens\\OrderScreen.js",["181"],"//The order screen is the screen returned after all the checkout steps are completed , the order proccess is the screen where the user is promted to pay the money in thier preffered payment selection that they choose before in the step 3\r\nimport React, { useState, useEffect } from \"react\";\r\n//Importing react elements into the functional component, By useEffect you can tell react that the component needs to do something after it renders, useState is used for component level state management\r\nimport axios from \"axios\";\r\n//The axios is used to make the payment method possible through\r\nimport { PayPalButton } from \"react-paypal-button-v2\";\r\n//The paypal button is downloaded from react paypal\r\nimport { Link } from \"react-router-dom\";\r\n//Link helps to turn normal steps into links\r\nimport { Row, Col, ListGroup, Image, Card, Button } from \"react-bootstrap\";\r\n// Row and Col devides the web site into a CSS Grid type, Image, card and button are the basic form components.\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\n//useSelector is used to feth the payload value from the reducer,The dispatch hook returns a reference to the dispatch funtion from the redux store ,used to dispatch actions\r\nimport Message from \"../components/Message\";\r\n//Importing the message component\r\nimport Loader from \"../components/Loader\";\r\n//Importing the loader component\r\nimport {\r\n  getOrderDetails,\r\n  payOrder,\r\n  deliverOrder,\r\n} from \"../actions/orderActions\";\r\n//Getting the order deatils , the payment used by the user and the delivery of the order\r\nimport {\r\n  ORDER_PAY_RESET,\r\n  ORDER_DELIVER_RESET,\r\n} from \"../constants/orderConstants\";\r\n//once the delivery and payment are done they should be updated accordingly for the next order\r\n\r\n//The OrderScreen takes in location(which is used to direct the user when they are logged in) and history(to push the user )\r\nconst OrderScreen = ({ match, history }) => {\r\n  const orderId = match.params.id;\r\n  //Getting the id of the users order\r\n\r\n  const [sdkReady, setSdkReady] = useState(false);\r\n  // above is the component level state for storing sdk(used for debit and credit card services) , stored as default\r\n\r\n  const dispatch = useDispatch();\r\n  //The dispatch hook returns a reference to the dispatch funtion from the redux store ,used to dispatch actions\r\n\r\n  const orderDetails = useSelector((state) => state.orderDetails);\r\n  const { order, loading, error } = orderDetails;\r\n  //above should get the order details of the user from the reducer , alon side whether it is loading or not\r\n\r\n  const orderPay = useSelector((state) => state.orderPay);\r\n  const { loading: loadingPay, success: successPay } = orderPay;\r\n  //The loading should be get from the order pay reducer, loading is the loading for the payment if it dosent work\r\n\r\n  const orderDeliver = useSelector((state) => state.orderDeliver);\r\n  const { loading: loadingDeliver, success: successDeliver } = orderDeliver;\r\n  // the users delivery details will be bought in from the orderDeliver reducer\r\n\r\n  const userLogin = useSelector((state) => state.userLogin);\r\n  const { userInfo } = userLogin;\r\n  //lastly the users login infor should be bought in from the userLogin reducer\r\n\r\n  if (!loading) {\r\n    const addDecimals = (num) => {\r\n      return (Math.round(num * 100) / 100).toFixed(2);\r\n    };\r\n    // if the page is not loading then add the decimals to the total price\r\n\r\n    order.itemsPrice = addDecimals(\r\n      order.orderItems.reduce((acc, item) => acc + item.price * item.qty, 0)\r\n    );\r\n    // and round up the total prie so that no .999999 comes in\r\n  }\r\n\r\n  useEffect(() => {\r\n    if (!userInfo) {\r\n      history.push(\"/login\");\r\n    }\r\n    //for security purposes , if the user is not a registered user , push them back to the login screen\r\n\r\n    //Below the paypal script should be displayed\r\n    const addPayPalScript = async () => {\r\n      const { data: clientId } = await axios.get(\"/api/config/paypal\");\r\n      // The paypal config number should be getched using axios get request\r\n      const script = document.createElement(\"script\");\r\n      // The pay pal script api is then bought in the paypal offical website\r\n      script.type = \"text/javascript\";\r\n      script.src = `https://www.paypal.com/sdk/js?client-id=${clientId}`;\r\n      //the client id is also bought in from the  the paypal login website\r\n      script.async = true;\r\n      script.onload = () => {\r\n        setSdkReady(true);\r\n        //The sdk is then true when its not loading\r\n      };\r\n      document.body.appendChild(script);\r\n      // The script is then loader\r\n    };\r\n\r\n    if (!order || successPay || successDeliver) {\r\n      // if the payment, payment delievry is successful then the order payment reset and order delivery rest  should be pressed for the next ordwer\r\n      dispatch({ type: ORDER_PAY_RESET });\r\n      dispatch({ type: ORDER_DELIVER_RESET });\r\n      dispatch(getOrderDetails(orderId));\r\n    } else if (!order.isPaid) {\r\n      // when the payment has not been made the paypal window should be shown untill payment completed\r\n      if (!window.paypal) {\r\n        addPayPalScript();\r\n      } else {\r\n        setSdkReady(true);\r\n        // Else then the paypal button should dissapear\r\n      }\r\n    }\r\n  }, [dispatch, orderId, successPay, successDeliver, order]);\r\n\r\n  const successPaymentHandler = (paymentResult) => {\r\n    console.log(paymentResult);\r\n    dispatch(payOrder(orderId, paymentResult));\r\n  };\r\n  // If the payment is successful then the order will bw paid by and will be marked in the orders list\r\n\r\n  const deliverHandler = () => {\r\n    dispatch(deliverOrder(order));\r\n  };\r\n  //The the delievr handler will then dispatch the delivery details to the deliverOrder action\r\n\r\n  return loading ? (\r\n    <Loader />\r\n  ) : // If loading is true the loader should be displayed\r\n  error ? (\r\n    // If the error is true the error should be displayed\r\n    <Message variant=\"danger\">{error}</Message>\r\n  ) : (\r\n    //else the order screen should be displayed\r\n    <>\r\n      <h1>Order {order._id}</h1>\r\n      {/* The order id would be displayed as the heading of the screen */}\r\n      <Row>\r\n        <Col md={8}>\r\n          <ListGroup variant=\"flush\">\r\n            <ListGroup.Item>\r\n              <h2>Shipping</h2>\r\n              {/* The shipping address should be displayed here*/}\r\n              <p>\r\n                {/* The users name should be displayed here  */}\r\n                <strong>Name: </strong> {order.user.name}\r\n              </p>\r\n              <p>\r\n                {/* The users email should be displayed here, as well as a mail link to the address */}\r\n                <strong>Email: </strong>{\" \"}\r\n                <a href={`mailto:${order.user.email}`}>{order.user.email}</a>\r\n              </p>\r\n\r\n              <p>\r\n                {/* The shipping address is displayed here */}\r\n                <strong>Address:</strong>\r\n                {/* The shipping address */}\r\n                {order.shippingAddress.address}, {order.shippingAddress.city}{\" \"}\r\n                {/* The shipping addressc city  */}\r\n                {order.shippingAddress.postalCode},{\" \"}\r\n                {/* The shipping address postal code */}\r\n                {order.shippingAddress.country}\r\n                {/* The shipping address country */}\r\n              </p>\r\n              {order.isDelivered ? (\r\n                // If the order has been delivered display a message displaying the order has been delivered at this time and day\r\n                <Message variant=\"success\">\r\n                  Delivered on {order.deliveredAt}\r\n                  {/* Delivered at  */}\r\n                </Message>\r\n              ) : (\r\n                // If not delivered indicate that it has not been delivered\r\n                <Message variant=\"danger\"> Not Delivered</Message>\r\n              )}\r\n            </ListGroup.Item>\r\n\r\n            <ListGroup.Item>\r\n              <h2>Payment Method</h2>\r\n              {/* The users preffered payment method should be displayed here*/}\r\n              <p>\r\n                <strong>Method: </strong>\r\n                {order.paymentMethod}\r\n                {/* The payment method */}\r\n              </p>\r\n              {order.isPaid ? (\r\n                // If he order is paid display a paid on message along with the payment date and time\r\n                <Message variant=\"success\">Paid on {order.paidAt}</Message>\r\n              ) : (\r\n                // if the order is not paid , display a message displaying the not paid\r\n                <Message variant=\"danger\"> Not Paid</Message>\r\n              )}\r\n            </ListGroup.Item>\r\n\r\n            <ListGroup.Item>\r\n              <h2>Order Items</h2>\r\n              {/* The ordered products the the user ordered should be listed here like the cart */}\r\n              {order.orderItems.length === 0 ? (\r\n                // If the products are nill, show a message saying no products\r\n                <Message>Order is empty</Message>\r\n              ) : (\r\n                // or else display the cart items below one by one\r\n                <ListGroup variant=\"flush\">\r\n                  {order.orderItems.map((item, index) => (\r\n                    <ListGroup.Item key={index}>\r\n                      <Row>\r\n                        <Col md={1}>\r\n                          {/* The image of the cart items */}\r\n                          <Image\r\n                            src={item.image}\r\n                            alt={item.name}\r\n                            fluid\r\n                            rounded\r\n                          />\r\n                        </Col>\r\n                        <Col>\r\n                          {/* // The name of the products */}\r\n                          {/* The link to that specific product */}\r\n                          <Link to={`/product/${item.product}`}>\r\n                            {item.name}\r\n                            {/* The products name */}\r\n                          </Link>\r\n                        </Col>\r\n                        <Col md={4}>\r\n                          {/* The price of the products measured by thier quantity  */}\r\n                          {item.qty} x £{item.price} = £{item.qty * item.price}\r\n                        </Col>\r\n                      </Row>\r\n                    </ListGroup.Item>\r\n                  ))}\r\n                </ListGroup>\r\n              )}\r\n            </ListGroup.Item>\r\n          </ListGroup>\r\n        </Col>\r\n        <Col md={4}>\r\n          <Card>\r\n            {/* The order summary on the 2nd column of the page */}\r\n            <ListGroup variant=\"flush\">\r\n              <ListGroup.Item>\r\n                <h2>Order Summary</h2>\r\n                {/* An order summary title should appear here */}\r\n              </ListGroup.Item>\r\n              <ListGroup.Item>\r\n                <Row>\r\n                  <Col>Items</Col>\r\n                  {/* The items price  */}\r\n                  <Col>£{order.itemsPrice}</Col>\r\n                  {/* The items price*/}\r\n                </Row>\r\n              </ListGroup.Item>\r\n              <ListGroup.Item>\r\n                <Row>\r\n                  {/* The shipping price  */}\r\n                  <Col>Shipping</Col>\r\n                  <Col>£{order.shippingPrice}</Col>\r\n                  {/* The shipping price  */}\r\n                </Row>\r\n              </ListGroup.Item>\r\n              <ListGroup.Item>\r\n                <Row>\r\n                  <Col>Tax</Col>\r\n                  {/* The tax price of the product */}\r\n                  <Col>£{order.taxPrice}</Col>\r\n                  {/* The price */}\r\n                </Row>\r\n              </ListGroup.Item>\r\n              <ListGroup.Item>\r\n                <Row>\r\n                  <Col>Total</Col>\r\n                  {/* The total price of the products in the system */}\r\n                  <Col>£{order.totalPrice}</Col>\r\n                  {/* The price */}\r\n                </Row>\r\n              </ListGroup.Item>\r\n              {!order.isPaid && (\r\n                // If the orders price is  paid then the button should not be displayed\r\n                <ListGroup.Item>\r\n                  {loadingPay && <Loader />}\r\n                  {/* The loading should be displayed */}\r\n                  {!sdkReady ? (\r\n                    // if the sdk is not ready then the loader should be displayed\r\n                    <Loader />\r\n                  ) : (\r\n                    // else the paypal button should be displayed\r\n                    <PayPalButton\r\n                      amount={order.totalPrice}\r\n                      onSuccess={successPaymentHandler}\r\n                    />\r\n                  )}\r\n                </ListGroup.Item>\r\n              )}\r\n              {/* if the delievred item is not displayed then laoder should be displayed  */}\r\n              {loadingDeliver && <Loader />}\r\n              {userInfo &&\r\n                userInfo.isAdmin &&\r\n                order.isPaid &&\r\n                !order.isDelivered && (\r\n                  // if order is not delivered then the button only to the admin should be showed to the\r\n                  <ListGroup.Item>\r\n                    {/* The the button should be displayed */}\r\n                    <Button\r\n                      type=\"button\"\r\n                      className=\"btn btn-block\"\r\n                      onClick={deliverHandler}\r\n                      // the deliverHander will mark the order as delievred\r\n                    >\r\n                      Mark As Delivered\r\n                    </Button>\r\n                  </ListGroup.Item>\r\n                )}\r\n            </ListGroup>\r\n          </Card>\r\n        </Col>\r\n      </Row>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default OrderScreen;\r\n// The OrderScreen is then exported to the app.js\r\n","C:\\Users\\rohan\\Documents\\Final Year Project\\EDG\\frontend\\src\\screens\\UserListScreen.js",[],"C:\\Users\\rohan\\Documents\\Final Year Project\\EDG\\frontend\\src\\screens\\UserEditScreen.js",[],"C:\\Users\\rohan\\Documents\\Final Year Project\\EDG\\frontend\\src\\screens\\ProductListScreen.js",[],"C:\\Users\\rohan\\Documents\\Final Year Project\\EDG\\frontend\\src\\screens\\ProductEditScreen.js",[],"C:\\Users\\rohan\\Documents\\Final Year Project\\EDG\\frontend\\src\\screens\\OrderListScreen.js",[],"C:\\Users\\rohan\\Documents\\Final Year Project\\EDG\\frontend\\src\\components\\SearchBox.js",[],"C:\\Users\\rohan\\Documents\\Final Year Project\\EDG\\frontend\\src\\components\\Paginate.js",[],"C:\\Users\\rohan\\Documents\\Final Year Project\\EDG\\frontend\\src\\components\\ProductCarousel.js",[],["182","183"],"C:\\Users\\rohan\\Documents\\Final Year Project\\EDG\\frontend\\src\\components\\Meta.js",[],{"ruleId":"184","replacedBy":"185"},{"ruleId":"186","replacedBy":"187"},{"ruleId":"188","severity":1,"message":"189","line":15,"column":3,"nodeType":"190","messageId":"191","endLine":15,"endColumn":16},{"ruleId":"192","severity":1,"message":"193","line":107,"column":6,"nodeType":"194","endLine":107,"endColumn":60,"suggestions":"195"},{"ruleId":"184","replacedBy":"196"},{"ruleId":"186","replacedBy":"197"},"no-native-reassign",["198"],"no-negated-in-lhs",["199"],"no-unused-vars","'ListGroupItem' is defined but never used.","Identifier","unusedVar","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'history' and 'userInfo'. Either include them or remove the dependency array.","ArrayExpression",["200"],["198"],["199"],"no-global-assign","no-unsafe-negation",{"desc":"201","fix":"202"},"Update the dependencies array to be: [dispatch, orderId, successPay, successDeliver, order, userInfo, history]",{"range":"203","text":"204"},[5237,5291],"[dispatch, orderId, successPay, successDeliver, order, userInfo, history]"]